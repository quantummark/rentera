'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/ToastContext';
import { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';
import { db, auth } from '@/app/firebase/firebase';

interface RentRequestButtonProps {
  listingId: string;
  ownerId: string;
}

type RequestStatus = 'none' | 'pending' | 'active' | 'signed';

export default function RentRequestButton({
  listingId,
  ownerId,
}: RentRequestButtonProps) {
  const [status, setStatus] = useState<RequestStatus>('none');
  const [loading, setLoading] = useState<boolean>(false);
  const { addToast } = useToast();

  // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä)
  const currentUser = auth.currentUser;
  const renterId = currentUser?.uid;

  // –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç Firestore –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  const requestDocRef = renterId
    ? doc(db, 'contracts', `${listingId}_${renterId}`)
    : null;

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å (pending/active)
  useEffect(() => {
    if (!requestDocRef) {
      setStatus('none');
      return;
    }

    const fetchStatus = async () => {
      try {
        const docSnap = await getDoc(requestDocRef);
        if (docSnap.exists()) {
          const data = docSnap.data();
          setStatus(data.status === 'active' ? 'active' : 'pending');
        } else {
          setStatus('none');
        }
      } catch (err: unknown) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞:', err);
      }
    };

    fetchStatus();
  }, [requestDocRef]);

  // 2. –û—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –¥–æ–≥–æ–≤–æ—Ä
  useEffect(() => {
    if (!requestDocRef) return;

    const checkSignedStatus = async () => {
      try {
        const docSnap = await getDoc(requestDocRef);
        if (docSnap.exists() && docSnap.data().status === 'signed') {
          setStatus('signed');
        }
      } catch (err: unknown) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', err);
      }
    };

    checkSignedStatus();
  }, [requestDocRef]);

  // –ï—Å–ª–∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–Ω–æ–ø–∫—É
  if (!renterId) {
    return null;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É
  const handleClick = async () => {
    if (status === 'pending') {
      addToast({
        title: '–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        description: '–ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞.',
      });
      return;
    }

    setLoading(true);
    try {
      await setDoc(requestDocRef!, {
        listingId,
        ownerId,
        renterId,
        status: 'pending',
        requestDate: serverTimestamp(),
      });

      setStatus('pending');
      addToast({
        title: '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        description: '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤.',
      });
    } catch (err: unknown) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', err);
      addToast({ title: '–û—à–∏–±–∫–∞', description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å.' });
    } finally {
      setLoading(false);
    }
  };

  // –í—ã–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
  let buttonText = 'üí∞ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω';
  if (status === 'pending') buttonText = '‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω';
  if (status === 'active') buttonText = '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ';
  if (status === 'signed') buttonText = 'üìÑ –î–æ–≥–æ–≤–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω';

  return (
    <Button
      className="w-full rounded-full bg-orange-500 hover:bg-orange-600 text-white"
      onClick={handleClick}
      disabled={loading || status !== 'none'}
    >
      {buttonText}
    </Button>
  );
}