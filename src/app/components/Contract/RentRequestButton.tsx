'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/ToastContext'; // —Ç–≤–æ–π toast –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
import { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';
import { db } from '@/app/firebase/firebase';

interface RentRequestButtonProps {
  listingId: string;
  ownerId: string;
  renterId: string;
}

type RequestStatus = 'none' | 'pending' | 'accepted' | 'rejected';

export default function RentRequestButton({ listingId, ownerId, renterId }: RentRequestButtonProps) {
  const [status, setStatus] = useState<RequestStatus>('none');
  const [loading, setLoading] = useState(false);

  const requestDocRef = doc(db, 'contracts', `${listingId}_${renterId}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  useEffect(() => {
    const fetchStatus = async () => {
      const docSnap = await getDoc(requestDocRef);
      if (docSnap.exists()) {
        const data = docSnap.data();
        setStatus(data.status);
      }
    };
    fetchStatus();
  }, [listingId, renterId]);

  const handleClick = async () => {
    if (status === 'pending') {
      useToast().addToast({ title: '–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', description: '–ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞.' });
      return;
    }

    setLoading(true);
    try {
      await setDoc(requestDocRef, {
        listingId,
        ownerId,
        renterId,
        status: 'pending',
        requestDate: serverTimestamp(),
      });

      setStatus('pending');
      useToast().addToast({ title: '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', description: '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤.' });
    } catch (err) {
      console.error(err);
      useToast().addToast({ title: '–û—à–∏–±–∫–∞', description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å.' });
    } finally {
      setLoading(false);
    }
  };

  const buttonText = (() => {
    switch (status) {
      case 'none': return 'üí∞ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω';
      case 'pending': return '‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω';
      case 'accepted': return '‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç';
      case 'rejected': return '‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω';
    }
  })();

  return (
    <Button
      className="bg-orange-500 hover:bg-orange-600 text-white w-full rounded-full"
      onClick={handleClick}
      disabled={loading || status === 'pending' || status === 'accepted'}
    >
      {buttonText}
    </Button>
  );
}
