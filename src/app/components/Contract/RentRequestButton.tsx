'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/ToastContext';
import { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';
import { db, auth } from '@/app/firebase/firebase';

interface RentRequestButtonProps {
  listingId: string;
  ownerId: string;
}

type RequestStatus = 'none' | 'pending' | 'active' | 'signed';

export default function RentRequestButton({ listingId, ownerId }: RentRequestButtonProps) {
  const [status, setStatus] = useState<RequestStatus>('none');
  const [loading, setLoading] = useState(false);
  const { addToast } = useToast();

  const currentUser = auth.currentUser;
  const renterId = currentUser?.uid;

  if (!renterId) return null; // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω

  const requestDocRef = doc(db, 'contracts', `${listingId}_${renterId}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞
  useEffect(() => {
    const fetchStatus = async () => {
      try {
        const docSnap = await getDoc(requestDocRef);
        if (docSnap.exists()) {
          const data = docSnap.data();
          if (data.status === 'active') setStatus('active');
          else setStatus('pending');
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞:', err);
      }
    };
    fetchStatus();
  }, [requestDocRef]);

  // –ï—Å–ª–∏ –≤ –∫–æ–ª–µ–∫—Ü–∏–∏ status: signed, –º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω"
  useEffect(() => {
  // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞ ‚Äî requestDocRef
  if (!requestDocRef) return;

  const checkSignedStatus = async () => {
    try {
      const docSnap = await getDoc(requestDocRef);
      if (docSnap.exists() && docSnap.data().status === 'signed') {
        setStatus('signed');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', err);
    }
  };

  checkSignedStatus();
}, [requestDocRef]);

  const handleClick = async () => {
    if (status === 'pending') {
      addToast({ title: '–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', description: '–ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞.' });
      return;
    }

    setLoading(true);
    try {
      await setDoc(requestDocRef, {
        listingId,
        ownerId,
        renterId,
        status: 'pending',
        requestDate: serverTimestamp(),
      });

      setStatus('pending');
      addToast({ title: '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', description: '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤.' });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', err);
      addToast({ title: '–û—à–∏–±–∫–∞', description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å.' });
    } finally {
      setLoading(false);
    }

  };

  let buttonText = 'üí∞ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω';
  if (status === 'pending') buttonText = '‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω';
  if (status === 'active') buttonText = '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ';
  if (status === 'signed') buttonText = 'üìÑ –î–æ–≥–æ–≤–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω'; 

  return (
    <Button
      className={`w-full rounded-full bg-orange-500 hover:bg-orange-600 text-white`}
      onClick={handleClick}
      disabled={loading || status !== 'none'}
    >
      {buttonText}
    </Button>
  );
}
